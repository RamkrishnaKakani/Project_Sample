parameters:
  - name: environment
    type: string

  - name: working_dir
    type: string

  - name: serviceconn_name
    type: string

  - name: project_name
    type: string

steps:
- task: AzureCLI@2
  displayName: "Dymanic JSON Creation"
  inputs:
    azureSubscription: 'Terraform_ServiceConnection'
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $fileName = "${{ parameters.working_dir }}\terraform.tfvars.json" 
      if($fileName -like "*Env*")
      { break  }
      $appPlan = az appservice plan list --query "[?tags.env=='${{ parameters.environment }}']" | ConvertFrom-Json
                     
      $data = @{}
      $apps = @{}
      $app = @{}
                
      $app.Add("app_name","${{ parameters.project_name}}")
      $app.Add("version","001")
      $apps.Add("app",$app)
      $data.Add("id", $appPlan.id )
      $data.Add("resourceGroup", $appPlan.resourceGroup )
      $data.Add("location", $appPlan.location.replace(' ','') )
      $data.Add("tags", $appPlan.tags)
      $data.Add("env", "${{ parameters.environment }}")
      $data.Add("apps", $apps)
      $data | ConvertTo-Json | Out-File -Path $fileName      
      #$data | ConvertTo-Json | set-content -Path $fileName
      
    addSpnToEnvironment: true
    useGlobalConfig: true
    addSpnToEnvironment: true
    useGlobalConfig: true
        
- task: PowerShell@2
  displayName: "Display JSON"
  inputs:
    targetType: 'inline'
    script: 'get-content ${{ parameters.working_dir }}/terraform.tfvars.json' 
        
- task: TerraformCLI@0
  displayName: "terraform init"
  enabled: true
  inputs:
    command: "init"
    backendServiceArm: ${{ parameters.serviceconn_name }}
    allowTelemetryCollection: true
    workingDirectory: ${{ parameters.working_dir }}          
         
- task: TerraformCLI@0
  displayName: "terraform plan"
  enabled: true
  inputs:
    command: 'plan'
    workingDirectory: '${{ parameters.working_dir }}'
    environmentServiceName: ${{ parameters.serviceconn_name }}
    commandOptions: '-out=tfplan'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  displayName: "terraform apply"
  enabled: True  
  inputs:
    command: 'apply'
    workingDirectory: '${{ parameters.working_dir }}'
    environmentServiceName: ${{ parameters.serviceconn_name }}
    commandOptions: 'tfplan'
    allowTelemetryCollection: true
  condition: and(succeeded(), eq(variables['TerraformApply'], 'True'))

- task: TerraformCLI@0
  displayName: "terraform destroy"
  enabled: True
  inputs:
    command: 'destroy'
    workingDirectory: '${{ parameters.working_dir }}'
    environmentServiceName: ${{ parameters.serviceconn_name }}
    allowTelemetryCollection: true
  condition: and(succeeded(), eq(variables['TerraformDestroy'], 'True'))
