trigger: none
pr: none

resources:
  repositories:
    - repository: CMTeam
      type : github
      endpoint: MyGithubServiceConnection
      name: RamkrishnaKakani/CMTeam
      ref : master

stages:
  - stage: Infra
    displayName: Infrastructure
    jobs:
      - job: Infra_Creation
        steps:
        - checkout: self
        #- checkout: CMTeam
        - task: AzureCLI@2
          displayName: "Dymanic JSON Creation"
          inputs:
            azureSubscription: 'Terraform_ServiceConnection'
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              $appPlan = az appservice plan list --query "[?tags.env=='$(env)']" | ConvertFrom-Json
              $fileName = "terraform.tfvars.json"                
              $data = @{}
              $apps = @{}
              $app = @{}
              
              $app.Add("app_name","$(project)")
              $app.Add("version","$(version)")
              $apps.Add("app",$app)
              $data.Add("id", $appPlan.id )
              $data.Add("resourceGroup", $appPlan.resourceGroup )
              $data.Add("location", $appPlan.location.replace(' ','') )
              $data.Add("tags", $appPlan.tags)
              $data.Add("env", "$(env)")
              $data.Add("apps", $apps)
              $data | ConvertTo-Json | set-content -Path $fileName
            addSpnToEnvironment: true
            useGlobalConfig: true
      
        - task: PowerShell@2
          displayName: "Display JSON"
          inputs:
            targetType: 'inline'
            script: 'get-content $(Build.SourcesDirectory)\terraform.tfvars.json' 
      
        - task: TerraformCLI@0
          displayName: "terraform init"
          enabled: true
          inputs:
            command: "init"
            backendServiceArm: "Terraform_ServiceConnection"
            allowTelemetryCollection: true
            workingDirectory: '$(Build.SourcesDirectory)\infra'        
        
        - task: TerraformCLI@0
          displayName: "terraform plan"
          enabled: true
          inputs:
            command: 'plan'
            workingDirectory: '$(Build.SourcesDirectory)\infra'
            environmentServiceName: "Terraform_ServiceConnection"
            commandOptions: '-out=tfplan'
            allowTelemetryCollection: true

        - task: TerraformCLI@0
          displayName: "terraform apply"
          enabled: False
          inputs:
            command: 'apply'
            workingDirectory: '$(Build.SourcesDirectory)\$(dir)\infra'
            environmentServiceName: "Terraform_ServiceConnection"
            commandOptions: 'tfplan'
            allowTelemetryCollection: true
          condition: and(succeeded(), eq(variables['TerraformApply'], 'True'))

        - task: TerraformCLI@0
          displayName: "terraform destroy"
          enabled: False
          inputs:
            command: 'destroy'
            workingDirectory: '$(Build.SourcesDirectory)\$(dir)\infra'
            environmentServiceName: "Terraform_ServiceConnection"
            allowTelemetryCollection: true
          condition: and(succeeded(), eq(variables['TerraformDestroy'], 'True'))     